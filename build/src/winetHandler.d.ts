import { z } from 'zod';
import { DeviceSchema } from './types/MessageTypes';
import { Properties } from './types/Properties';
import { DeviceStatusMap } from './types/DeviceStatus';
import Winston from 'winston';
import { Analytics } from './analytics';
export declare class winetHandler {
    private logger;
    private properties;
    private host;
    private ssl;
    private lang;
    private frequency;
    private callbackUpdatedStatus;
    private ws;
    private analytics;
    private winetUser;
    private winetPass;
    private token;
    private currentDevice;
    private inFlightDevice;
    private currentStages;
    private devices;
    private deviceStatus;
    private lastDeviceUpdate;
    private watchdogCount;
    private watchdogLastData;
    private winetVersion;
    private scanInterval;
    private watchdogInterval;
    constructor(logger: Winston.Logger, host: string, lang: string, frequency: number, winetUser: string, winetPass: string, analytics: Analytics);
    setProperties(properties: Properties): void;
    setCallback(callback: (devices: z.infer<typeof DeviceSchema>[], deviceStatus: DeviceStatusMap[]) => void): void;
    setWatchdog(): void;
    clearWatchdog(): void;
    connect(ssl?: boolean): void;
    reconnect(): void;
    private sendPacket;
    private onOpen;
    private onError;
    private onMessage;
    private updateDeviceStatus;
    private scanDevices;
}
